import type {
  ViewProps,
  // TextProps,
  // TextInputProps,
  // PressableProps,
  // VirtualizedListProps,
} from 'react-native';

type ViewPropName = keyof ViewProps;
const viewPropNames = [
  'onStartShouldSetResponder',
  'accessibilityLabel',
  'accessibilityHint',
  'hitSlop',
  'nativeID',
  'onAccessibilityTap',
  'onLayout',
  'onMagicTap',
  'onMoveShouldSetResponder',
  'onMoveShouldSetResponderCapture',
  'onResponderGrant',
  'onResponderMove',
  'onResponderReject',
  'onResponderRelease',
  'onResponderTerminate',
  'onResponderTerminationRequest',
  'accessible',
  'onStartShouldSetResponderCapture',
  'pointerEvents',
  'removeClippedSubviews',
  'testID',
  'accessibilityComponentType',
  'accessibilityLiveRegion',
  'collapsable',
  'importantForAccessibility',
  'needsOffscreenAlphaCompositing',
  'renderToHardwareTextureAndroid',
  'accessibilityRole',
  'accessibilityTraits',
  'accessibilityViewIsModal',
  'accessibilityElementsHidden',
  'accessibilityIgnoresInvertColors',
  'shouldRasterizeIOS',
  'style',
  'focusable',
  'isTVSelectable',
  'hasTVPreferredFocus',
  'tvParallaxProperties',
  'tvParallaxShiftDistanceX',
  'tvParallaxShiftDistanceY',
  'tvParallaxTiltAngle',
  'tvParallaxTiltAngle',
  'tvParallaxMagnification',
  'onResponderEnd',
  'onResponderStart',
  'onTouchStart',
  'onTouchMove',
  'onTouchEnd',
  'onTouchCancel',
  'onTouchEndCapture',
  'accessibilityActions',
  'accessibilityState',
  'accessibilityValue',
  'onAccessibilityAction',
  'onAccessibilityEscape',
] as const;
// this ensures that we get typescript errors if a key from ViewProps is missing
const viewPropNamesWithEnsuredCompleteKeys: readonly typeof viewPropNames[number][] = viewPropNames as readonly ViewPropName[];
export const viewProps = new Set(viewPropNamesWithEnsuredCompleteKeys);

// type TextPropName = keyof TextProps;
export const textProps = new Set([
  'selectable',
  'accessibilityHint',
  'accessibilityLabel',
  'accessible',
  'ellipsizeMode',
  'nativeID',
  'numberOfLines',
  'onLayout',
  'onLongPress',
  'onPress',
  'pressRetentionOffset',
  'allowFontScaling',
  'style',
  'testID',
  'disabled',
  'selectionColor',
  'textBreakStrategy',
  'adjustsFontSizeToFit',
  'minimumFontScale',
  'suppressHighlighting',
  'pointerEvents',
]);

export const imageProps = new Set([
  'blurRadius',
  'onLayout',
  'onLoad',
  'onLoadEnd',
  'onLoadStart',
  'resizeMode',
  'source',
  'loadingIndicatorSource',
  'onError',
  'testID',
  'resizeMethod',
  'accessibilityLabel',
  'accessible',
  'capInsets',
  'defaultSource',
  'onPartialLoad',
  'onProgress',
  'fadeDuration',
  'pointerEvents',
]);

export const listProps = new Set([
  'renderItem',
  'data',
  'sections',
  'ItemSeparatorComponent',
  'ListEmptyComponent',
  'ListFooterComponent',
  'ListHeaderComponent',
  'columnWrapperStyle',
  'extraData',
  'getItemLayout',
  'horizontal',
  'initialNumToRender',
  'initialScrollIndex',
  'inverted',
  'keyExtractor',
  'numColumns',
  'testID',
  'onEndReached',
  'onEndReachedThreshold',
  'onRefresh',
  'onViewableItemsChanged',
  'progressViewOffset',
  'legacyImplementation',
  'refreshing',
  'removeClippedSubviews',
  'viewabilityConfig',
  'viewabilityConfigCallbackPairs',
  'renderSectionFooter',
  'renderSectionHeader',
  'SectionSeparatorComponent',
  'stickySectionHeadersEnabled',
  'updateCellsBatchingPeriod',
  'windowSize',
  'disableVirtualization',
  'getItem',
  'getItemCount',
  'debug',
  'CellRendererComponent',
  'onLayout',
  'onScrollToIndexFailed',
  'renderScrollComponent',
  'maxToRenderPerBatch',
  'alwaysBounceVertical',
  'contentContainerStyle',
  'keyboardDismissMode',
  'keyboardShouldPersistTaps',
  'onContentSizeChange',
  'onMomentumScrollBegin',
  'onMomentumScrollEnd',
  'onScroll',
  'onScrollBeginDrag',
  'onScrollEndDrag',
  'pagingEnabled',
  'refreshControl',
  'scrollEnabled',
  'showsHorizontalScrollIndicator',
  'showsVerticalScrollIndicator',
  'stickyHeaderIndices',
  'endFillColor',
  'overScrollMode',
  'scrollPerfTag',
  'alwaysBounceHorizontal',
  'automaticallyAdjustContentInsets',
  'bounces',
  'bouncesZoom',
  'canCancelContentTouches',
  'centerContent',
  'contentInset',
  'contentInsetAdjustmentBehavior',
  'contentOffset',
  'decelerationRate',
  'directionalLockEnabled',
  'indicatorStyle',
  'maximumZoomScale',
  'minimumZoomScale',
  'pinchGestureEnabled',
  'scrollEventThrottle',
  'scrollIndicatorInsets',
  'scrollsToTop',
  'snapToAlignment',
  'snapToInterval',
  'snapToOffsets',
  'snapToStart',
  'snapToEnd',
  'zoomScale',
  'nestedScrollEnabled',
  'pointerEvents',
]);

export const pressableProps = new Set([
  'hitSlop',
  'accessibilityComponentType',
  'accessibilityHint',
  'accessibilityLabel',
  'accessibilityRole',
  'accessibilityStates',
  'accessibilityTraits',
  'accessible',
  'delayLongPress',
  'delayPressIn',
  'delayPressOut',
  'disabled',
  'testID',
  'onBlur',
  'onFocus',
  'onLayout',
  'onLongPress',
  'onPress',
  'onPressIn',
  'onPressOut',
  'pressRetentionOffset',
  'activeOpacity',
  'tvParallaxProperties',
  'hasTVPreferredFocus',
  'pointerEvents',
]);

export const inputProps = new Set([
  'allowFontScaling',
  'autoCapitalize',
  'autoCorrect',
  'autoFocus',
  'blurOnSubmit',
  'caretHidden',
  'clearButtonMode',
  'clearTextOnFocus',
  'contextMenuHidden',
  'dataDetectorTypes',
  'defaultValue',
  'disableFullscreenUI',
  'editable',
  'enablesReturnKeyAutomatically',
  'inlineImageLeft',
  'inlineImagePadding',
  'keyboardAppearance',
  'keyboardType',
  'maxLength',
  'multiline',
  'numberOfLines',
  'onBlur',
  'onChange',
  'onChangeText',
  'onContentSizeChange',
  'onEndEditing',
  'onFocus',
  'onKeyPress',
  'onScroll',
  'onSelectionChange',
  'onSubmitEditing',
  'placeholder',
  'placeholderTextColor',
  'returnKeyLabel',
  'returnKeyType',
  'scrollEnabled',
  'secureTextEntry',
  'selection',
  'selectionColor',
  'selectionState',
  'selectTextOnFocus',
  'spellCheck',
  'textContentType',
  'style',
  'textBreakStrategy',
  'underlineColorAndroid',
  'value',
]);

export type PropsFilterFunction = (props: any) => any;

export const makePropsFilter = (...propsSets: Set<string>[]): PropsFilterFunction => {
  const allPropsSet = new Set<string>([]);
  for (const set of propsSets) set.forEach((el) => allPropsSet.add(el));

  return (props: any) => {
    const propsCopy: any = {};
    for (const key in props) if (allPropsSet.has(key)) propsCopy[key] = props[key];
    return propsCopy;
  };
};

export const domProps = new Set([
  'allowFullScreen',
  'autoComplete',
  'autoFocus',
  'challenge',
  'charSet',
  'checked',
  'className',
  'content',
  'contentEditable',
  'crossOrigin',
  'data',
  'disabled',
  'draggable',
  'href',
  'id',
  'scrolling',
  'spellCheck',
  'tabIndex',
  'target',
  'type',
  'wrap',
  'onCopy',
  'onCut',
  'onPaste',
  'onCompositionEnd',
  'onCompositionStart',
  'onCompositionUpdate',
  'onKeyDown',
  'onKeyPress',
  'onKeyUp',
  'onFocus',
  'onBlur',
  'onChange',
  'onInput',
  'onInvalid',
  'onSubmit',
  'onClick',
  'onContextMenu',
  'onDoubleClick',
  'onDrag',
  'onDragEnd',
  'onDragEnter',
  'onDragExit',
  'onDragLeave',
  'onDragOver',
  'onDragStart',
  'onDrop',
  'onMouseDown',
  'onMouseEnter',
  'onMouseLeave',
  'onMouseMove',
  'onMouseOut',
  'onMouseOver',
  'onMouseUp',
  'onPointerDown',
  'onPointerMove',
  'onPointerUp',
  'onPointerCancel',
  'onGotPointerCapture',
  'onLostPointerCapture',
  'onPointerEnter',
  'onPointerLeave',
  'onPointerOver',
  'onPointerOut',
  'onSelect',
  'onTouchCancel',
  'onTouchEnd',
  'onTouchMove',
  'onTouchStart',
  'onScroll',
  'onWheel',
  'onAnimationStart',
  'onAnimationEnd',
  'onAnimationIteration',
  'onTransitionEnd',
  'onToggle',
]);
